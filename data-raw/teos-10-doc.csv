name,desc
gsw_add_barrier,"Adds a barrier through Central America (Panama) and then averages
over the appropriate side of the barrier"
gsw_add_mean,Replaces NaN's with non-nan mean of the 4 adjacent neighbours
gsw_adiabatic_lapse_rate_from_ct,Calculates the adiabatic lapse rate from Conservative Temperature
gsw_adiabatic_lapse_rate_ice,Calculates the adiabatic lapse rate of ice.
gsw_alpha,"Calculates the thermal expansion coefficient of seawater with respect to 
Conservative Temperature using the computationally-efficient 48-term 
expression for density in terms of SA, CT and p (IOC et al., 2010)"
gsw_alpha_on_beta,"Calculates alpha divided by beta, where alpha is the thermal expansion
coefficient and beta is the saline contraction coefficient of seawater 
from Absolute Salinity and Conservative Temperature.  This function uses
the computationally-efficient expression for specific volume in terms of 
SA, CT and p (Roquet et al., 2014)."
gsw_alpha_wrt_t_exact,"Calculates thermal expansion coefficient of seawater with respect to 
in-situ temperature"
gsw_alpha_wrt_t_ice,"Calculates the thermal expansion coefficient of ice with respect to  
in-situ temperature."
gsw_beta,"Calculates the saline (i.e. haline) contraction coefficient of seawater  
at constant Conservative Temperature using the computationally-efficient
expression for specific volume in terms of SA, CT and p 
(Roquet et al., 2014)."
gsw_beta_const_t_exact,"Calculates saline (haline) contraction coefficient of seawater at 
constant in-situ temperature."
gsw_c_from_sp,"Calculates conductivity, C, from (SP,t,p) using PSS-78 in the range
2 < SP < 42.  If the input Practical Salinity is less than 2 then a
modified form of the Hill et al. (1986) fomula is used for Practical
Salinity.  The modification of the Hill et al. (1986) expression is to
ensure that it is exactly consistent with PSS-78 at SP = 2.
The conductivity ratio returned by this function is consistent with the
input value of Practical Salinity, SP, to 2x10^-14 psu over the full
range of input parameters (from pure fresh water up to SP = 42 psu).
This error of 2x10^-14 psu is machine precision at typical seawater
salinities.  This accuracy is achieved by having four different
polynomials for the starting value of Rtx (the square root of Rt) in
four different ranges of SP, and by using one and a half iterations of
a computationally efficient modified Newton-Raphson technique (McDougall
and Wotherspoon, 2012) to find the root of the equation.
Note that strictly speaking PSS-78 (Unesco, 1983) defines Practical
Salinity in terms of the conductivity ratio, R, without actually
specifying the value of C(35,15,0) (which we currently take to be
42.9140 mS/cm)."
gsw_cabbeling,"Calculates the cabbeling coefficient of seawater with respect to  
Conservative Temperature.  This function uses the computationally-
efficient expression for specific volume in terms of SA, CT and p
(Roquet et al., 2014)."
gsw_chem_potential_water_ice,"Calculates the chemical potential of water in ice from in-situ
temperature and pressure."
gsw_chem_potential_water_t_exact,Calculates the chemical potential of water in seawater.
gsw_cp_ice,Calculates the isobaric heat capacity of seawater.
gsw_cp_t_exact,Calculates isobaric heat capacity of seawater
gsw_ct_first_derivatives,"Calculates the following two derivatives of Conservative Temperature
(1) CT_SA, the derivative with respect to Absolute Salinity at 
constant potential temperature (with pr = 0 dbar), and
2) CT_pt, the derivative with respect to potential temperature
(the regular potential temperature which is referenced to 0 dbar)
at constant Absolute Salinity."
gsw_ct_first_derivatives_wrt_t_exact,"Calculates the following three derivatives of Conservative Temperature.
These derivatives are done with respect to in-situ temperature t (in the
case of CT_T_wrt_t) or at constant in-situ tempertature (in the cases of
CT_SA_wrt_t and CT_P_wrt_t).  
(1) CT_SA_wrt_t, the derivative of CT with respect to Absolute Salinity 
at constant t and p, and
(2) CT_T_wrt_t, derivative of CT with respect to in-situ temperature t 
at constant SA and p. 
(3) CT_P_wrt_t, derivative of CT with respect to pressure P (in Pa) at  
constant SA and t.    
This function uses the full Gibbs function. Note that this function
avoids the NaN that would exist in CT_SA_wrt_t at SA = 0 if it were
evaluated in the straightforward way from the derivatives of the Gibbs 
function function."
gsw_ct_freezing,"Calculates the Conservative Temperature at which seawater freezes.  The
Conservative Temperature freezing point is calculated from the exact
in-situ freezing temperature which is found by a modified Newton-Raphson
iteration (McDougall and Wotherspoon, 2013) of the equality of the
chemical potentials of water in seawater and in ice.
An alternative GSW function, gsw_CT_freezing_poly, it is based on a
computationally-efficient polynomial, and is accurate to within -5e-4 K
and 6e-4 K, when compared with this function."
gsw_ct_freezing_first_derivatives,"Calculates the first derivatives of the Conservative Temperature at
which seawater freezes, with respect to Absolute Salinity SA and
pressure P (in Pa)."
gsw_ct_freezing_first_derivatives_poly,"Calculates the first derivatives of the Conservative Temperature at
which seawater freezes, with respect to Absolute Salinity SA and
pressure P (in Pa) of the comptationally efficient polynomial fit of the
freezing temperature (McDougall et al., 2014)."
gsw_ct_freezing_poly,"Calculates the Conservative Temperature at which seawater freezes.
The error of this fit ranges between -5e-4 K and 6e-4 K when compared 
with the Conservative Temperature calculated from the exact in-situ 
freezing temperature which is found by a Newton-Raphson iteration of the 
equality of the chemical potentials of water in seawater and in ice.  
Note that the Conservative temperature freezing temperature can be found
by this exact method using the function gsw_CT_freezing."
gsw_ct_from_enthalpy,"Calculates the Conservative Temperature of seawater, given the Absolute 
Salinity, specific enthalpy, h, and pressure p."
gsw_ct_from_enthalpy_exact,"Calculates the Conservative Temperature of seawater, given the Absolute 
Salinity, specific enthalpy, h, and pressure p."
gsw_ct_from_entropy,Calculates Conservative Temperature with entropy as an input variable.
gsw_ct_from_pt,Calculates Conservative Temperature from potential temperature of seawater
gsw_ct_from_rho,"Calculates the Conservative Temperature of a seawater sample, for given
values of its density, Absolute Salinity and sea pressure (in dbar)."
gsw_ct_from_t,Calculates Conservative Temperature from in-situ temperature
gsw_ct_maxdensity,"Calculates the Conservative Temperature of maximum density of seawater. 
This function returns the Conservative temperature at which the density
of seawater is a maximum, at given Absolute Salinity, SA, and sea 
pressure, p (in dbar)."
gsw_ct_second_derivatives,"Calculates the following three, second-order derivatives of Conservative
Temperature
(1) CT_SA_SA, the second derivative with respect to Absolute Salinity
at constant potential temperature (with p_ref = 0 dbar),
(2) CT_SA_pt, the derivative with respect to potential temperature
(the regular potential temperature which is referenced to 0 dbar)
and Absolute Salinity, and
(3) CT_pt_pt, the second derivative with respect to potential
temperature (the regular potential temperature which is referenced
to 0 dbar) at constant Absolute Salinity."
gsw_deltasa_from_sp,"Calculates Absolute Salinity Anomaly, deltaSA, from Practical Salinity, SP."
gsw_dilution_coefficient_t_exact,"Calculates the dilution coefficient of seawater.  The dilution 
coefficient of seawater is defined as the Absolute Salinity times the 
second derivative of the Gibbs function with respect to Absolute 
Salinity, that is, SA.*g_SA_SA."
gsw_dynamic_enthalpy,"Calculates dynamic enthalpy of seawater using the computationally-
efficient expression for specific volume in terms of SA, CT and p
(Roquet et al., 2014).  Dynamic enthalpy is defined as enthalpy minus
|  potential enthalpy (Young, 2010)."
gsw_enthalpy,"Calculates specific enthalpy of seawater using the computationally-
efficient expression for specific volume in terms of SA, CT and p
(Roquet et al., 2014)."
gsw_enthalpy_ct_exact,"Calculates specific enthalpy of seawater from Absolute Salinity and 
Conservative Temperature and pressure.  
Note that this function uses the full Gibbs function."
gsw_enthalpy_diff,"Calculates the difference of the specific enthalpy of seawater between 
two different pressures, p_deep (the deeper pressure) and p_shallow
(the shallower pressure), at the same values of SA and CT.  This 
function uses the computationally-efficient expression for specific 
volume in terms of SA, CT and p (Roquet et al., 2014).  The output
(enthalpy_diff_CT) is the specific enthalpy evaluated at (SA,CT,p_deep)
minus the specific enthalpy at (SA,CT,p_shallow)."
gsw_enthalpy_first_derivatives,"Calculates the following two derivatives of specific enthalpy (h) of
seawater using the computationally-efficient expression for 
specific volume in terms of SA, CT and p (Roquet et al., 2014).  
(1) h_SA, the derivative with respect to Absolute Salinity at 
constant CT and p, and
(2) h_CT, derivative with respect to CT at constant SA and p. 
Note that h_P is specific volume (1/rho) it can be caclulated by calling
gsw_specvol(SA,CT,p)."
gsw_enthalpy_first_derivatives_ct_exact,"Calculates the following two derivatives of specific enthalpy (h)
(1) h_SA, the derivative with respect to Absolute Salinity at
constant CT and p, and
(2) h_CT, derivative with respect to CT at constant SA and p.
Note that h_P is specific volume (1/rho) it can be calulated by calling
gsw_specvol_CT_exact(SA,CT,p). This function uses the full Gibbs function."
gsw_enthalpy_ice,Calculates the specific enthalpy of ice (h_Ih).
gsw_enthalpy_second_derivatives,"Calculates the following three second-order derivatives of specific
enthalpy (h),using the computationally-efficient expression for 
specific volume in terms of SA, CT and p (Roquet et al., 2014).
(1) h_SA_SA, second-order derivative with respect to Absolute Salinity 
at constant CT & p.
(2) h_SA_CT, second-order derivative with respect to SA & CT at 
constant p. 
(3) h_CT_CT, second-order derivative with respect to CT at constant SA 
and p."
gsw_enthalpy_second_derivatives_ct_exact,"Calculates three second-order derivatives of specific enthalpy (h).
Note that this function uses the full Gibbs function."
gsw_enthalpy_sso_0,"This function calculates enthalpy at the Standard Ocean Salinity, SSO,
and at a Conservative Temperature of zero degrees C, as a function of
pressure, p, in dbar, using a streamlined version of the
computationally-efficient expression for specific volume, that is, a
streamlined version of the code ""gsw_enthalpy(SA,CT,p)""."
gsw_enthalpy_t_exact,Calculates the specific enthalpy of seawater
gsw_entropy_first_derivatives,"Calculates the following two partial derivatives of specific entropy
(eta) 
(1) eta_SA, the derivative with respect to Absolute Salinity at 
constant Conservative Temperature, and
(2) eta_CT, the derivative with respect to Conservative Temperature at 
constant Absolute Salinity."
gsw_entropy_from_ct,Calculates specific entropy of seawater from Conservative Temperature.
gsw_entropy_from_pt,Calculates specific entropy of seawater.
gsw_entropy_from_t,Calculates the specific entropy of seawater
gsw_entropy_ice,Calculates specific entropy of ice.
gsw_entropy_part,entropy minus the terms that are a function of only SA
gsw_entropy_part_zerop,entropy part evaluated at the sea surface
gsw_entropy_second_derivatives,"Calculates the following three second-order partial derivatives of 
specific entropy (eta) 
(1) eta_SA_SA, the second derivative with respect to Absolute  
Salinity at constant Conservative Temperature, and
(2) eta_SA_CT, the derivative with respect to Absolute Salinity and 
Conservative Temperature. 
(3) eta_CT_CT, the second derivative with respect to Conservative 
Temperature at constant Absolute Salinity."
gsw_fdelta,Calculates fdelta.
gsw_frazil_properties,"Calculates the mass fraction of ice (mass of ice divided by mass of ice
plus seawater), w_Ih_final, which results from given values of the bulk
Absolute Salinity, SA_bulk, bulk enthalpy, h_bulk, occuring at pressure
p.  The final values of Absolute Salinity, SA_final, and Conservative
Temperature, CT_final, of the interstitial seawater phase are also
returned.  This code assumes that there is no dissolved air in the
seawater (that is, saturation_fraction is assumed to be zero
throughout the code).
When the mass fraction w_Ih_final is calculated as being a positive
value, the seawater-ice mixture is at thermodynamic equlibrium.  
This code returns w_Ih_final = 0 when the input bulk enthalpy, h_bulk, 
is sufficiently large (i.e. sufficiently ""warm"") so that there is no ice 
present in the final state.  In this case the final state consists of 
only seawater rather than being an equlibrium mixture of seawater and 
ice which occurs when w_Ih_final is positive.  Note that when"
gsw_frazil_properties_potential,"Calculates the mass fraction of ice (mass of ice divided by mass of ice
plus seawater), w_Ih_final, which results from given values of the bulk
Absolute Salinity, SA_bulk, bulk potential enthalpy, h_pot_bulk,
occuring at pressure p.  The final equilibrium values of Absolute
Salinity, SA_final, and Conservative Temperature, CT_final, of the
interstitial seawater phase are also returned.  This code assumes that
there is no dissolved air in the seawater (that is, saturation_fraction
is assumed to be zero thoughout the code).
When the mass fraction w_Ih_final is calculated as being a positive
value, the seawater-ice mixture is at thermodynamic equlibrium.  
This code returns w_Ih_final = 0 when the input bulk enthalpy, h_bulk, 
is sufficiently large (i.e. sufficiently ""warm"") so that there is no ice 
present in the final state.  In this case the final state consists of 
only seawater rather than being an equlibrium mixture of seawater and 
ice which occurs when w_Ih_final is positive.  Note that when"
gsw_frazil_properties_potential_poly,"Calculates the mass fraction of ice (mass of ice divided by mass of ice
plus seawater), w_Ih_final, which results from given values of the bulk
Absolute Salinity, SA_bulk, bulk potential enthalpy, h_pot_bulk,
occuring at pressure p.  The final equilibrium values of Absolute
Salinity, SA_final, and Conservative Temperature, CT_final, of the
interstitial seawater phase are also returned.  This code assumes that
there is no dissolved air in the seawater (that is, saturation_fraction
is assumed to be zero thoughout the code).
When the mass fraction w_Ih_final is calculated as being a positive
value, the seawater-ice mixture is at thermodynamic equlibrium.  
This code returns w_Ih_final = 0 when the input bulk enthalpy, h_bulk, 
is sufficiently large (i.e. sufficiently ""warm"") so that there is no ice 
present in the final state.  In this case the final state consists of 
only seawater rather than being an equlibrium mixture of seawater and 
ice which occurs when w_Ih_final is positive.  Note that when"
gsw_frazil_ratios_adiabatic,"Calculates the ratios of SA, CT and P changes when frazil ice forms or
melts in response to an adiabatic change in pressure of a mixture of 
seawater and frazil ice crystals.  
Note that the first output, dSA_dCT_frazil, is dSA/dCT rather than 
dCT/dSA.  This is done so that when SA = 0, the output, dSA/dCT, is zero 
whereas dCT/dSA would then be infinite. 
Also note that both dSA_dP_frazil and dCT_dP_frazil are the pressure
derivatives with the pressure measured in Pa not dbar."
gsw_frazil_ratios_adiabatic_poly,"Calculates the ratios of SA, CT and P changes when frazil ice forms or
melts in response to an adiabatic change in pressure of a mixture of
seawater and frazil ice crystals.
Note that the first output, dSA_dCT_frazil, is dSA/dCT rather than
dCT/dSA.  This is done so that when SA = 0, the output, dSA/dCT, is zero
whereas dCT/dSA would then be infinite.
Also note that both dSA_dP_frazil and dCT_dP_frazil are the pressure
derivatives with the pressure measured in Pa not dbar."
"/* Returns NULL on error, dyn_height if okay */
gsw_geo_strf_dyn_height","Calculates dynamic height anomaly as the integral of specific volume
anomaly from the pressure p of the bottle to the reference pressure
p_ref.
Hence, geo_strf_dyn_height is the dynamic height anomaly with respect
to a given reference pressure.  This is the geostrophic streamfunction
for the difference between the horizontal velocity at the pressure
concerned, p, and the horizontal velocity at p_ref.  Dynamic height
anomaly is the geostrophic streamfunction in an isobaric surface.  The
reference values used for the specific volume anomaly are

*/
static void p_sequence(double p1,double p2,double max_dp_i,double *pseq,
	int *nps);	/* forward reference"
gsw_geo_strf_dyn_height_pc,"Calculates dynamic height anomaly as the integral of specific volume 
anomaly from the the sea surface pressure (0 Pa) to the pressure p.
This function, gsw_geo_strf_dyn_height_pc, is to used when the 
Absolute Salinity and Conservative Temperature are piecewise constant in 
the vertical over sucessive pressure intervals of delta_p (such as in
a forward ""z-coordinate"" ocean model).  ""geo_strf_dyn_height_pc"" is
the dynamic height anomaly with respect to the sea surface.  That is, 
""geo_strf_dyn_height_pc"" is the geostrophic streamfunction for the 
difference between the horizontal velocity at the pressure concerned, p,
and the horizontal velocity at the sea surface.  Dynamic height anomaly 
is the geostrophic streamfunction in an isobaric surface.  The reference
values used for the specific volume anomaly are SA = SSO = 35.16504 g/kg
and CT = 0 deg C.  The output values of geo_strf_dyn_height_pc are 
given at the mid-point pressures, p_mid, of each layer in which SA and 
CT are vertically piecewice constant (pc).  This function calculates 
enthalpy using the computationally-efficient 75-term expression for 
specific volume of Roquet et al., (2015)."
gsw_gibbs,seawater specific Gibbs free energy and derivatives up to order 2
gsw_gibbs_ice,Ice specific Gibbs energy and derivatives up to order 2.
gsw_gibbs_ice_part_t,"part of the the first temperature derivative of Gibbs energy of ice
that is the outout is gibbs_ice(1,0,t,p) + S0"
gsw_gibbs_ice_pt0,"Part of the the first temperature derivative of Gibbs energy of ice
that is the outout is ""gibbs_ice(1,0,pt0,0) + s0"""
gsw_gibbs_ice_pt0_pt0,"The second temperature derivative of Gibbs energy of ice at the 
potential temperature with reference sea pressure of zero dbar.  That is
the output is gibbs_ice(2,0,pt0,0)."
gsw_gibbs_pt0_pt0,"gibbs_tt at (sa,pt,0)"
gsw_grav,"Calculates acceleration due to gravity as a function of latitude and as
a function of pressure in the ocean."
gsw_helmholtz_energy_ice,Calculates the Helmholtz energy of ice.
gsw_hill_ratio_at_sp2,"Calculates the Hill ratio, which is the adjustment needed to apply for
Practical Salinities smaller than 2.  This ratio is defined at a 
Practical Salinity = 2 and in-situ temperature, t using PSS-78. The Hill
ratio is the ratio of 2 to the output of the Hill et al. (1986) formula
for Practical Salinity at the conductivity ratio, Rt, at which Practical
Salinity on the PSS-78 scale is exactly 2."
gsw_ice_fraction_to_freeze_seawater,"Calculates the mass fraction of ice (mass of ice divided by mass of ice
plus seawater), which, when melted into seawater having (SA,CT,p) causes
the final dilute seawater to be at the freezing temperature.  The other
outputs are the Absolute Salinity and Conservative Temperature of the
final diluted seawater."
gsw_internal_energy,Calculates internal energy of seawater.
gsw_internal_energy_ice,Calculates the specific internal energy of ice.
gsw_ipv_vs_fnsquared_ratio,"Calculates the ratio of the vertical gradient of potential density to 
the vertical gradient of locally-referenced potential density.  This 
ratio is also the ratio of the planetary Isopycnal Potential Vorticity
(IPV) to f times N^2, hence the name for this variable,
IPV_vs_fNsquared_ratio (see Eqn. (3.20.5) of IOC et al. (2010)). 
The reference sea pressure, p_ref, of the potential density surface must
have a constant value.
IPV_vs_fNsquared_ratio is evaluated at the mid pressure between the 
individual data points in the vertical."
gsw_kappa,"Calculates isentropic compressibility of seawater.  This function
has inputs of Absolute Salinity and Conservative Temperature.  This
function uses the computationally-efficient expression for
specific volume in terms of SA, CT and p (Roquet et al., 2014)."
gsw_kappa_const_t_ice,"Calculates isothermal compressibility of ice. 
Note. This is the compressibility of ice AT CONSTANT IN-SITU
TEMPERATURE"
gsw_kappa_ice,Calculates the isentropic compressibility of ice.
gsw_kappa_t_exact,isentropic compressibility of seawater
gsw_latentheat_evap_ct,"Calculates latent heat, or enthalpy, of evaporation."
gsw_latentheat_evap_t,"Calculates latent heat, or enthalpy, of evaporation."
gsw_latentheat_melting,"Calculates latent heat, or enthalpy, of melting."
gsw_linear_interp_sa_ct,"This function interpolates the cast with respect to the interpolating 
variable p. This function finds the values of SA, CT at p_i on this cast.
VERSION NUMBER: 3.05 (27th January 2015)
This function was adapted from Matlab's interp1q.
!=========================================================================="
gsw_melting_ice_equilibrium_sa_ct_ratio,"Calculates the ratio of SA to CT changes when ice melts into seawater
with both the seawater and the seaice temperatures being almost equal to
the equilibrium freezing temperature.  It is assumed that a small mass 
of ice melts into an infinite mass of seawater.  If indeed the 
temperature of the seawater and the ice were both equal to the freezing
temperature, then no melting or freezing would occur an imbalance 
between these three temperatures is needed for freezing or melting to
occur (the three temperatures being (1) the seawater temperature, 
(2) the ice temperature, and (3) the freezing temperature.  
The output, melting_ice_equilibrium_SA_CT_ratio, is dSA/dCT rather than 
dCT/dSA.  This is done so that when SA = 0, the output, dSA/dCT is zero
whereas dCT/dSA would be infinite."
gsw_melting_ice_equilibrium_sa_ct_ratio_poly,"Calculates the ratio of SA to CT changes when ice melts into seawater
with both the seawater and the seaice temperatures being almost equal to
the equilibrium freezing temperature.  It is assumed that a small mass
of ice melts into an infinite mass of seawater.  If indeed the
temperature of the seawater and the ice were both equal to the freezing
temperature, then no melting or freezing would occur an imbalance
between these three temperatures is needed for freezing or melting to
occur (the three temperatures being (1) the seawater temperature,
(2) the ice temperature, and (3) the freezing temperature.
The output, melting_ice_equilibrium_SA_CT_ratio, is dSA/dCT rather than
dCT/dSA.  This is done so that when SA = 0, the output, dSA/dCT is zero
whereas dCT/dSA would be infinite."
gsw_melting_ice_into_seawater,"Calculates the final Absolute Salinity, final Conservative Temperature
and final ice mass fraction that results when a given mass fraction of
ice melts and is mixed into seawater whose properties are (SA,CT,p).
This code takes the seawater to contain no dissolved air.
When the mass fraction w_Ih_final is calculated as being a positive
value, the seawater-ice mixture is at thermodynamic equlibrium.
This code returns w_Ih_final = 0 when the input bulk enthalpy, h_bulk,
is sufficiently large (i.e. sufficiently ""warm"") so that there is no ice
present in the final state.  In this case the final state consists of
only seawater rather than being an equlibrium mixture of seawater and
ice which occurs when w_Ih_final is positive.  Note that when"
gsw_melting_ice_sa_ct_ratio,"Calculates the ratio of SA to CT changes when ice melts into seawater.
It is assumed that a small mass of ice melts into an infinite mass of
seawater.  Because of the infinite mass of seawater, the ice will always
melt.   
The output, melting_seaice_SA_CT_ratio, is dSA/dCT rather than dCT/dSA. 
This is done so that when SA = 0, the output, dSA/dCT is zero whereas 
dCT/dSA would be infinite."
gsw_melting_ice_sa_ct_ratio_poly,"Calculates the ratio of SA to CT changes when ice melts into seawater.
It is assumed that a small mass of ice melts into an infinite mass of
seawater.  Because of the infinite mass of seawater, the ice will always
melt.
The output, melting_seaice_SA_CT_ratio, is dSA/dCT rather than dCT/dSA.
This is done so that when SA = 0, the output, dSA/dCT is zero whereas
dCT/dSA would be infinite."
gsw_melting_seaice_equilibrium_sa_ct_ratio,"Calculates the ratio of SA to CT changes when sea ice melts into 
seawater with both the seawater and the sea ice temperatures being  
almost equal to the equilibrium freezing temperature.  It is assumed  
that a small mass of seaice melts into an infinite mass of seawater.  If 
indeed the temperature of the seawater and the sea ice were both equal  
to the freezing temperature, then no melting or freezing would occur; an  
imbalance between these three temperatures is needed for freezing or 
melting to occur (the three temperatures being (1) the seawater 
temperature, (2) the sea ice temperature, and (3) the freezing 
temperature.  
Note that the output of this function, dSA/dCT is independent of the 
sea ice salinity, SA_seaice.  That is, the output applies equally to  
pure ice Ih and to sea ice with seaice salinity, SA_seaice.  This result 
is proven in the manuscript, McDougall et al. (2013).  
The output, melting_seaice_equilibrium_SA_CT_ratio, is dSA/dCT rather  
than dCT/dSA.  This is done so that when SA = 0, the output, dSA/dCT is 
zero whereas dCT/dSA would be infinite."
gsw_melting_seaice_equilibrium_sa_ct_ratio_poly,"Calculates the ratio of SA to CT changes when sea ice melts into
seawater with both the seawater and the sea ice temperatures being
almost equal to the equilibrium freezing temperature.  It is assumed
that a small mass of seaice melts into an infinite mass of seawater.  If
indeed the temperature of the seawater and the sea ice were both equal
to the freezing temperature, then no melting or freezing would occur; an
imbalance between these three temperatures is needed for freezing or
melting to occur (the three temperatures being (1) the seawater
temperature, (2) the sea ice temperature, and (3) the freezing
temperature.
Note that the output of this function, dSA/dCT is independent of the
sea ice salinity, SA_seaice.  That is, the output applies equally to
pure ice Ih and to sea ice with seaice salinity, SA_seaice.  This result
is proven in the manuscript, McDougall et al. (2013).
The output, melting_seaice_equilibrium_SA_CT_ratio, is dSA/dCT rather
than dCT/dSA.  This is done so that when SA = 0, the output, dSA/dCT is
zero whereas dCT/dSA would be infinite."
gsw_melting_seaice_into_seawater,"Calculates the Absolute Salinity and Conservative Temperature that 
results when a given mass of sea ice (or ice) melts and is mixed into a 
known mass of seawater (whose properties are (SA,CT,p)).  
If the ice contains no salt (e.g. if it is of glacial origin), then the 
input 'SA_seaice' should be set to zero.  
Ice formed at the sea surface (sea ice) typically contains between 2 g/kg
and 12 g/kg of salt (defined as the mass of salt divided by the mass of 
ice Ih plus brine) and this programme returns NaN's if the input  
SA_seaice is greater than 15 g/kg.  If the SA_seaice input is not zero,   
usually this would imply that the pressure p should be zero, as sea ice  
only occurs near the sea surface.  The code does not impose that p = 0 
if SA_seaice is non-zero.  Rather, this is left to the user.  
The Absolute Salinity, SA_brine, of the brine trapped in little pockets 
in the sea ice, is in thermodynamic equilibrium with the ice Ih that
surrounds these pockets.  As the sea ice temperature, t_seaice, may be 
less than the freezing temperature, SA_brine is usually greater than the
Absolute Salinity of the seawater at the time and place when and where 
the sea ice was formed.  So usually SA_brine will be larger than SA."
gsw_melting_seaice_sa_ct_ratio,"Calculates the ratio of SA to CT changes when sea ice melts into seawater.
It is assumed that a small mass of sea ice melts into an infinite mass of
seawater.  Because of the infinite mass of seawater, the sea ice will 
always melt.   
Ice formed at the sea surface (sea ice) typically contains between 2 g/kg
and 12 g/kg of salt (defined as the mass of salt divided by the mass of 
ice Ih plus brine) and this programme returns NaN's if the input 
SA_seaice is greater than 15 g/kg.  If the SA_seaice input is not zero, 
usually this would imply that the pressure p should be zero, as sea ice 
only occurs near the sea surface.  The code does not impose that p = 0 if 
SA_seaice is non-zero.  Rather, this is left to the user.  
The Absolute Salinity, SA_brine, of the brine trapped in little pockets 
in the sea ice, is in thermodynamic equilibrium with the ice Ih that
surrounds these pockets.  As the seaice temperature, t_seaice, may be 
less than the freezing temperature, SA_brine is usually greater than the
Absolute Salinity of the seawater at the time and place when and where 
the sea ice was formed.  So usually SA_brine will be larger than SA.  
The output, melting_seaice_SA_CT_ratio, is dSA/dCT rather than dCT/dSA. 
This is done so that when (SA - seaice_SA) = 0, the output, dSA/dCT is 
zero whereas dCT/dSA would be infinite."
gsw_melting_seaice_sa_ct_ratio_poly,"Calculates the ratio of SA to CT changes when sea ice melts into seawater.
It is assumed that a small mass of sea ice melts into an infinite mass of
seawater.  Because of the infinite mass of seawater, the sea ice will
always melt.
Ice formed at the sea surface (sea ice) typically contains between 2 g/kg
and 12 g/kg of salt (defined as the mass of salt divided by the mass of
ice Ih plus brine) and this programme returns NaN's if the input
SA_seaice is greater than 15 g/kg.  If the SA_seaice input is not zero,
usually this would imply that the pressure p should be zero, as sea ice
only occurs near the sea surface.  The code does not impose that p = 0 if
SA_seaice is non-zero.  Rather, this is left to the user.
The Absolute Salinity, SA_brine, of the brine trapped in little pockets
in the sea ice, is in thermodynamic equilibrium with the ice Ih that
surrounds these pockets.  As the seaice temperature, t_seaice, may be
less than the freezing temperature, SA_brine is usually greater than the
Absolute Salinity of the seawater at the time and place when and where
the sea ice was formed.  So usually SA_brine will be larger than SA.
The output, melting_seaice_SA_CT_ratio, is dSA/dCT rather than dCT/dSA.
This is done so that when (SA - seaice_SA) = 0, the output, dSA/dCT is
zero whereas dCT/dSA would be infinite."
gsw_nsquared,"Calculates the buoyancy frequency squared (N^2)(i.e. the Brunt-Vaisala 
frequency squared) at the mid pressure from the equation,
2      2             beta.d(SA) - alpha.d(CT)"
gsw_p_from_z,Calculates the pressure p from height z
gsw_pot_enthalpy_from_pt_ice,"Calculates the potential enthalpy of ice from potential temperature of
ice (whose reference sea pressure is zero dbar)."
gsw_pot_enthalpy_from_pt_ice_poly,"Calculates the potential enthalpy of ice from potential temperature of
ice (whose reference sea pressure is zero dbar).  This is a
compuationally efficient polynomial fit to the potential enthalpy of
ice."
gsw_pot_enthalpy_ice_freezing,Calculates the potential enthalpy of ice at which seawater freezes.
gsw_pot_enthalpy_ice_freezing_first_derivatives,"Calculates the first derivatives of the potential enthalpy of ice at
which seawater freezes, with respect to Absolute Salinity SA and
pressure P (in Pa)."
gsw_pot_enthalpy_ice_freezing_first_derivatives_poly,"Calculates the first derivatives of the potential enthalpy of ice Ih at
which ice melts into seawater with Absolute Salinity SA and at pressure 
p.  This code uses the comptationally efficient polynomial fit of the
freezing potential enthalpy of ice Ih (McDougall et al., 2015)."
gsw_pot_enthalpy_ice_freezing_poly,"Calculates the potential enthalpy of ice at which seawater freezes.
The error of this fit ranges between -2.5 and 1 J/kg with an rms of 
1.07, between SA of 0 and 120 g/kg and p between 0 and 10,000 dbar (the
error in the fit is between -0.7 and 0.7 with an rms of
0.3, between SA of 0 and 120 g/kg and p between 0 and 5,000 dbar) when
compared with the potential enthalpy calculated from the exact in-situ 
freezing temperature which is found by a Newton-Raphson iteration of the 
equality of the chemical potentials of water in seawater and in ice."
gsw_pot_rho_t_exact,Calculates the potential density of seawater
gsw_pressure_coefficient_ice,Calculates pressure coefficient of ice.
gsw_pressure_freezing_ct,"Calculates the pressure (in dbar) of seawater at the freezing
temperature.  That is, the output is the pressure at which seawater,
with Absolute Salinity SA, Conservative Temperature CT, and with
saturation_fraction of dissolved air, freezes.  If the input values are
such that there is no value of pressure in the range between 0 dbar and
10,000 dbar for which seawater is at the freezing temperature, the
output, pressure_freezing, is put equal to NaN."
gsw_pt0_cold_ice_poly,"Calculates an initial estimate of pt0_ice when it is less than about
-100 deg C."
gsw_pt0_from_t,"Calculates potential temperature with reference pressure, p_ref = 0 dbar."
gsw_pt0_from_t_ice,"Calculates potential temperature of ice Ih with a reference pressure of
0 dbar, from in-situ temperature, t."
gsw_pt_first_derivatives,"Calculates the following two partial derivatives of potential temperature 
(the regular potential temperature whose reference sea pressure is 0 dbar) 
(1) pt_SA, the derivative with respect to Absolute Salinity at 
constant Conservative Temperature, and
(2) pt_CT, the derivative with respect to Conservative Temperature at 
constant Absolute Salinity."
gsw_pt_from_ct,potential temperature of seawater from conservative temperature
gsw_pt_from_entropy,"Calculates potential temperature with reference pressure p_ref = 0 dbar 
and with entropy as an input variable."
gsw_pt_from_pot_enthalpy_ice,"Calculates the potential temperature of ice from the potential enthalpy
of ice.  The reference sea pressure of both the potential temperature
and the potential enthalpy is zero dbar."
gsw_pt_from_pot_enthalpy_ice_poly,"Calculates the potential temperature of ice (whose reference sea 
pressure is zero dbar) from the potential enthalpy of ice.  This is a
compuationally efficient polynomial fit to the potential enthalpy of
ice."
gsw_pt_from_pot_enthalpy_ice_poly_dh,"Calculates the derivative of potential temperature of ice with respect 
to potential enthalpy.  This is based on the compuationally-efficient 
polynomial fit to the potential enthalpy of ice."
gsw_pt_from_t,Calculates potential temperature of seawater from in-situ temperature
gsw_pt_from_t_ice,"Calculates potential temperature of ice Ih with the general reference
pressure, p_ref, from in-situ temperature, t.
A faster gsw routine exists if p_ref is indeed zero dbar.  This routine
is ""gsw_pt0_from_t_ice(t,p)""."
gsw_pt_second_derivatives,"Calculates the following three second-order derivatives of potential 
temperature (the regular potential temperature which has a reference 
sea pressure of 0 dbar), 
(1) pt_SA_SA, the second derivative with respect to Absolute Salinity 
at constant Conservative Temperature,
(2) pt_SA_CT, the derivative with respect to Conservative Temperature
and Absolute Salinity, and
(3) pt_CT_CT, the second derivative with respect to Conservative 
Temperature at constant Absolute Salinity."
gsw_rho,"Calculates in-situ density from Absolute Salinity and Conservative 
Temperature, using the computationally-efficient expression for
specific volume in terms of SA, CT and p (Roquet et al., 2014)."
gsw_rho_alpha_beta,"Calculates in-situ density, the appropiate thermal expansion coefficient
and the appropriate saline contraction coefficient of seawater from 
Absolute Salinity and Conservative Temperature.  This function uses the
computationally-efficient expression for specific volume in terms of 
SA, CT and p (Roquet et al., 2014).
Note that potential density (pot_rho) with respect to reference pressure
p_ref is obtained by calling this function with the pressure argument 
being p_ref as in [pot_rho, ~, ~] = gsw_rho_alpha_beta(SA,CT,p_ref)."
gsw_rho_first_derivatives,"Calculates the three (3) partial derivatives of in situ density with 
respect to Absolute Salinity, Conservative Temperature and pressure.  
Note that the pressure derivative is done with respect to pressure in 
Pa, not dbar.  This function uses the computationally-efficient expression
for specific volume in terms of SA, CT and p (Roquet et al., 2014)."
gsw_rho_first_derivatives_wrt_enthalpy,"Calculates two first-order derivatives of specific volume (v).
Note that this function uses the using the computationally-efficient
expression for specific volume (Roquet et al., 2014)."
gsw_rho_ice,"Calculates in-situ density of ice from in-situ temperature and pressure.
Note that the output, rho_ice, is density, not density anomaly;  that 
is, 1000 kg/m^3 is not subracted from it."
gsw_rho_second_derivatives,"Calculates five second-order derivatives of rho. Note that this function
uses the computationally-efficient expression for specific
volume (Roquet et al., 2014)."
gsw_rho_second_derivatives_wrt_enthalpy,"Calculates three second-order derivatives of rho with respect to enthalpy.
Note that this function uses the using the computationally-efficient
expression for specific volume (Roquet et al., 2014)."
gsw_rho_t_exact,"Calculates in-situ density of seawater from Absolute Salinity and 
in-situ temperature."
gsw_rr68_interp_sa_ct,"Interpolate Absolute Salinity and Conservative Temperature values to
arbitrary pressures using the Reiniger and Ross (1968) interpolation
scheme.
Note that this interpolation scheme requires at least four observed
bottles on the cast.
*/
static void rr68_interp_section(int sectnum, double *sa, double *ct, double *p,
	int mp, int nsect, double *ip_sect,
	int *ip_isect, double *p_i, double *sa_i, double *ct_i);
/* forward reference"
gsw_sa_freezing_estimate,"Form an estimate of SA from a polynomial in CT and p 
!--------------------------------------------------------------------------"
gsw_sa_freezing_from_ct,"Calculates the Absolute Salinity of seawater at the freezing temperature.  
That is, the output is the Absolute Salinity of seawater, with 
Conservative Temperature CT, pressure p and the fraction 
saturation_fraction of dissolved air, that is in equilibrium 
with ice at the same in situ temperature and pressure.  If the input 
values are such that there is no positive value of Absolute Salinity for
which seawater is frozen, the output is made a NaN."
gsw_sa_freezing_from_ct_poly,"Calculates the Absolute Salinity of seawater at the freezing temperature.  
That is, the output is the Absolute Salinity of seawater, with the 
fraction saturation_fraction of dissolved air, that is in equilibrium 
with ice at Conservative Temperature CT and pressure p.  If the input 
values are such that there is no positive value of Absolute Salinity for
which seawater is frozen, the output is put equal to Nan."
gsw_sa_freezing_from_t,"Calculates the Absolute Salinity of seawater at the freezing temperature.
That is, the output is the Absolute Salinity of seawater, with the
fraction saturation_fraction of dissolved air, that is in equilibrium
with ice at in-situ temperature t and pressure p.  If the input values
are such that there is no positive value of Absolute Salinity for which
seawater is frozen, the output is set to NaN."
gsw_sa_freezing_from_t_poly,"Calculates the Absolute Salinity of seawater at the freezing temperature.
That is, the output is the Absolute Salinity of seawater, with the
fraction saturation_fraction of dissolved air, that is in equilibrium
with ice at in-situ temperature t and pressure p.  If the input values
are such that there is no positive value of Absolute Salinity for which
seawater is frozen, the output is put equal to Nan."
gsw_sa_from_rho,"Calculates the Absolute Salinity of a seawater sample, for given values
of its density, Conservative Temperature and sea pressure (in dbar)."
gsw_sa_from_sp,"Calculates Absolute Salinity, SA, from Practical Salinity, SP"
gsw_sa_from_sp_baltic,"For the Baltic Sea, calculates Absolute Salinity with a value
computed analytically from Practical Salinity"
gsw_sa_from_sstar,"Calculates Absolute Salinity, SA, from Preformed Salinity, Sstar."
gsw_sa_p_inrange,Check for any values that are out of the TEOS-10 range ...
gsw_seaice_fraction_to_freeze_seawater,"Calculates the mass fraction of sea ice (mass of sea ice divided by mass 
of sea ice plus seawater), which, when melted into seawater having the
properties (SA,CT,p) causes the final seawater to be at the freezing 
temperature.  The other outputs are the Absolute Salinity and 
Conservative Temperature of the final seawater."
gsw_sigma0,"Calculates potential density anomaly with reference pressure of 0 dbar,
this being this particular potential density minus 1000 kg/m^3.  This
function has inputs of Absolute Salinity and Conservative Temperature.
This function uses the computationally-efficient 48-term expression for 
density in terms of SA, CT and p (IOC et al., 2010)."
gsw_sigma1,"Calculates potential density anomaly with reference pressure of 1000 dbar,
this being this particular potential density minus 1000 kg/m^3.  This
function has inputs of Absolute Salinity and Conservative Temperature."
gsw_sigma2,"Calculates potential density anomaly with reference pressure of 2000 dbar,
this being this particular potential density minus 1000 kg/m^3.  This
function has inputs of Absolute Salinity and Conservative Temperature."
gsw_sigma3,"Calculates potential density anomaly with reference pressure of 3000 dbar,
this being this particular potential density minus 1000 kg/m^3.  This
function has inputs of Absolute Salinity and Conservative Temperature."
gsw_sigma4,"Calculates potential density anomaly with reference pressure of 4000 dbar,
this being this particular potential density minus 1000 kg/m^3.  This
function has inputs of Absolute Salinity and Conservative Temperature."
gsw_sound_speed,"Calculates the speed of sound in seawater.  This function has inputs of
Absolute Salinity and Conservative Temperature.  This function uses the
computationally-efficient expression for specific volume in terms of SA,
CT and p (Roquet et al., 2014)."
gsw_sound_speed_ice,Calculates the compression speed of sound in ice.
gsw_sound_speed_t_exact,Calculates the speed of sound in seawater
gsw_sp_from_c,"Calculates Practical Salinity, SP, from conductivity, C, primarily using
the PSS-78 algorithm.  Note that the PSS-78 algorithm for Practical
Salinity is only valid in the range 2 < SP < 42.  If the PSS-78
algorithm produces a Practical Salinity that is less than 2 then the
Practical Salinity is recalculated with a modified form of the Hill et
al. (1986) formula.  The modification of the Hill et al. (1986)
expression is to ensure that it is exactly consistent with PSS-78
at SP = 2.  Note that the input values of conductivity need to be in
units of mS/cm (not S/m)."
gsw_sp_from_sa,"Calculates Practical salinity, sp, from Absolute salinity, sa"
gsw_sp_from_sa_baltic,"For the Baltic Sea, calculates Practical Salinity with a value
computed analytically from Absolute Salinity"
gsw_sp_from_sk,"Calculates Practical Salinity, SP, from SK"
gsw_sp_from_sr,"Calculates Practical Salinity, sp, from Reference Salinity, sr."
gsw_sp_from_sstar,"Calculates Practical Salinity, SP, from Preformed Salinity, Sstar."
gsw_specvol,"Calculates specific volume from Absolute Salinity, Conservative
Temperature and pressure, using the computationally-efficient
polynomial expression for specific volume (Roquet et al., 2014)."
gsw_specvol_alpha_beta,"Calculates specific volume, the appropiate thermal expansion coefficient
and the appropriate saline contraction coefficient of seawater from 
Absolute Salinity and Conservative Temperature.  This function uses the
computationally-efficient expression for specific volume in terms of 
SA, CT and p (Roquet et al., 2014)."
gsw_specvol_anom_standard,Calculates specific volume anomaly of seawater.
gsw_specvol_first_derivatives,"Calculates three first-order derivatives of specific volume (v).
Note that this function uses the computationally-efficient
expression for specific volume (Roquet et al., 2014)."
gsw_specvol_first_derivatives_wrt_enthalpy,"Calculates two first-order derivatives of specific volume (v).
Note that this function uses the using the computationally-efficient
expression for specific volume (Roquet et al., 2014)."
gsw_specvol_ice,Calculates the specific volume of ice.
gsw_specvol_second_derivatives,"Calculates five second-order derivatives of specific volume (v).
Note that this function uses the computationally-efficient
expression for specific volume (Roquet et al., 2014)."
gsw_specvol_second_derivatives_wrt_enthalpy,"Calculates three first-order derivatives of specific volume (v) with
respect to enthalpy. Note that this function uses the using the
computationally-efficient expression for specific volume
(Roquet et al., 2014)."
gsw_specvol_sso_0,"This function calculates specific volume at the Standard Ocean Salinty,
SSO, and at a Conservative Temperature of zero degrees C, as a function 
of pressure, p, in dbar, using a streamlined version of the CT version
of specific volume, that is, a streamlined version of the code
""gsw_specvol(SA,CT,p)""."
gsw_specvol_t_exact,Calculates the specific volume of seawater
gsw_spiciness0,"Calculates spiciness from Absolute Salinity and Conservative 
Temperature at a pressure of 0 dbar, as described by McDougall and 
Krzysik (2015).  This routine is based on the computationally-efficient 
expression for specific volume in terms of SA, CT and p (Roquet et al., 
2015)."
gsw_spiciness1,"Calculates spiciness from Absolute Salinity and Conservative 
Temperature at a pressure of 1000 dbar, as described by McDougall and 
Krzysik (2015).  This routine is based on the computationally-efficient 
expression for specific volume in terms of SA, CT and p (Roquet et al., 
2015)."
gsw_spiciness2,"Calculates spiciness from Absolute Salinity and Conservative 
Temperature at a pressure of 2000 dbar, as described by McDougall and 
Krzysik (2015).  This routine is based on the computationally-efficient 
expression for specific volume in terms of SA, CT and p (Roquet et al., 
2015)."
gsw_sr_from_sp,"Calculates Reference Salinity, SR, from Practical Salinity, SP."
gsw_sstar_from_sa,"Calculates Preformed Salinity, Sstar, from Absolute Salinity, SA."
gsw_sstar_from_sp,"Calculates Preformed Salinity, Sstar, from Practical Salinity, SP."
gsw_t_deriv_chem_potential_water_t_exact,"Calculates the temperature derivative of the chemical potential of water
in seawater so that it is valid at exactly SA = 0."
gsw_t_freezing,Calculates the in-situ temperature at which seawater freezes
gsw_t_freezing_first_derivatives,"Calculates the first derivatives of the in-situ temperature at which 
seawater freezes with respect to Absolute Salinity SA and pressure P (in
Pa).  These expressions come from differentiating the expression that
defines the freezing temperature, namely the equality between the 
chemical potentials of water in seawater and in ice."
gsw_t_freezing_first_derivatives_poly,"Calculates the first derivatives of the in-situ temperature at which 
seawater freezes with respect to Absolute Salinity SA and pressure P (in
Pa).  These expressions come from differentiating the expression that
defines the freezing temperature, namely the equality between the 
chemical potentials of water in seawater and in ice."
gsw_t_freezing_poly,"Calculates the in-situ temperature at which seawater freezes from a
computationally efficient polynomial."
gsw_t_from_ct,Calculates in-situ temperature from Conservative Temperature of seawater
gsw_t_from_pt0_ice,"Calculates in-situ temperature from the potential temperature of ice Ih 
with reference pressure, p_ref, of 0 dbar (the surface), and the 
in-situ pressure."
gsw_thermobaric,"Calculates the thermobaric coefficient of seawater with respect to
Conservative Temperature.  This routine is based on the
computationally-efficient expression for specific volume in terms of
SA, CT and p (Roquet et al., 2014)."
gsw_turner_rsubrho,"Calculates the Turner angle and the Rsubrho as a function of pressure 
down a vertical water column.  These quantities express the relative 
contributions of the vertical gradients of Conservative Temperature 
and Absolute Salinity to the vertical stability (the square of the 
Brunt-Vaisala Frequency squared, N^2).  Tu and Rsubrho are evaluated at 
the mid pressure between the individual data points in the vertical.  
Note that in the double-diffusive literature, papers concerned with
the ""diffusive"" form of double-diffusive convection often define the 
stability ratio as the reciprocal of what is defined here as the 
stability ratio."
gsw_util_indx,Finds the index of the value in a monotonically increasing array
gsw_util_interp1q_int,"Returns the value of the 1-D function iy (integer) at the points of column
vector x_i using linear interpolation. The vector x specifies the
coordinates of the underlying interval.
!=========================================================================="
gsw_util_linear_interp,"Returns the values of the functions y{ny} at the points of column
vector x_i using linear interpolation. The vector x specifies the
coordinates of the underlying interval, and the matrix y specifies
| the function values at each x coordinate. Note that y has dimensions
| nx x ny and y_i has dimensions nxi x ny.
This function was adapted from Matlab's interp1q.
!=========================================================================="
gsw_util_xinterp1,Linearly interpolate a real array
gsw_z_from_p,Calculates the height z from pressure p
gsw_saar,"function gsw_saar(p,long,lat)
!==========================================================================

Calculates the Absolute Salinity Anomaly Ratio, SAAR at a geographic point."
gsw_deltasa_atlas,"Calculates the Absolute Salinity Anomaly atlas value, delta_SA_atlas."
